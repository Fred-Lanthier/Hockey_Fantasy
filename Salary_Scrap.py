"""
Solution automatique compl√®te: Selenium + PuckPedia
Simule un vrai navigateur pour contourner tous les blocages
Installation: pip install selenium webdriver-manager
"""

import pandas as pd
import time
import re
from io import StringIO

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def setup_driver():
    """Configure le navigateur Chrome en mode headless (invisible)"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Mode invisible
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # User agent r√©aliste
    chrome_options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36')
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    return driver

def clean_player_name(name):
    """Nettoie le nom du joueur pour l'URL"""
    name = name.lower().strip()
    name = name.replace(' ', '-')
    name = name.replace('.', '')
    name = name.replace("'", '')
    return name

def get_salary_puckpedia_selenium(player_name, team_abbr, driver):
    """
    VERSION ROBUSTE - Sans v√©rification d'√©quipe
    Si homonymes: prend le salaire maximum
    """
    clean_name = clean_player_name(player_name)
    
    urls_to_try = [
        f"https://puckpedia.com/player/{clean_name}",
        f"https://puckpedia.com/player/{clean_name}-1",
        f"https://puckpedia.com/player/{clean_name}-2",
    ]
    
    found_salaries = []  # Pour stocker tous les salaires trouv√©s
    
    for url in urls_to_try:
        try:
            driver.get(url)
            time.sleep(3)  # Augment√© √† 3 secondes pour meilleur chargement
            
            page_source = driver.page_source
            
            # Ne plus v√©rifier l'√©quipe - juste chercher le salaire
            cap_hit = None
            
            # STRAT√âGIE 1: Extraire entre CURRENT CONTRACT et PROFILE
            match = re.search(
                r'CURRENT\s+CONTRACT(.*?)PROFILE',
                page_source,
                re.IGNORECASE | re.DOTALL
            )
            
            if match:
                contract_section = match.group(1)
                dollar_match = re.search(r'\$([0-9,]+)', contract_section)
                
                if dollar_match:
                    cap_hit_str = dollar_match.group(1).replace(',', '')
                    cap_hit = float(cap_hit_str) / 1_000_000
                    
                    if 0.5 < cap_hit < 20:
                        found_salaries.append(cap_hit)
                        continue
            
            # STRAT√âGIE 2: Chercher "Cap Hit" suivi du montant
            if cap_hit is None:
                cap_hit_match = re.search(
                    r'Cap\s+Hit[^$]*\$([0-9,]+)',
                    page_source,
                    re.IGNORECASE | re.DOTALL
                )
                
                if cap_hit_match:
                    cap_hit_str = cap_hit_match.group(1).replace(',', '')
                    cap_hit = float(cap_hit_str) / 1_000_000
                    
                    if 0.5 < cap_hit < 20:
                        found_salaries.append(cap_hit)
                        continue
            
            # STRAT√âGIE 3: Chercher dans les balises span avec classe "val-lg"
            if cap_hit is None:
                span_match = re.search(
                    r'<span class="val-lg">\$([0-9,]+)</span>',
                    page_source
                )
                
                if span_match:
                    cap_hit_str = span_match.group(1).replace(',', '')
                    cap_hit = float(cap_hit_str) / 1_000_000
                    
                    if 0.5 < cap_hit < 20:
                        found_salaries.append(cap_hit)
            
        except Exception as e:
            continue
    
    # Si on a trouv√© des salaires, prendre le maximum (en cas d'homonymes)
    if found_salaries:
        max_salary = max(found_salaries)
        print(f"‚úì {player_name}: ${max_salary:.2f}M")
        return max_salary
    
    return 0.78  # Valeur par d√©faut si non trouv√©

def enrich_fantrax_automatic(input_file, output_file):
    """
    Version automatique compl√®te avec Selenium
    Fonctionne pour N'IMPORTE QUEL fichier Fantrax, n'importe quelle ann√©e
    """
    print("=" * 80)
    print("üèí ENRICHISSEMENT AUTOMATIQUE AVEC SELENIUM")
    print("=" * 80)
    print()
    print("üìå Installation du driver Chrome...")
    
    # Setup du navigateur
    driver = setup_driver()
    print("‚úì Navigateur Chrome configur√© (mode invisible)\n")
    
    # Lire le fichier
    print(f"üìÇ Lecture: {input_file}")
    df = pd.read_csv(input_file)
    print(f"‚úì {len(df)} joueurs trouv√©s\n")
    
    # Ajouter la colonne
    df['Cap Hit (M$)'] = None
    
    print("üí∞ R√©cup√©ration des salaires (peut prendre quelques minutes)...\n")
    
    success_count = 0
    fail_count = 0
    for idx, row in df.iterrows():
        player_name = row.get('Player', '')
        team = row.get('Team', '')
        
        if pd.isna(player_name) or player_name == '':
            continue
        print(f"[{idx+1}/{len(df)}] Recherche: {player_name} ({team})...", end=' ')
        
        # Essayer PuckPedia
        cap_hit = get_salary_puckpedia_selenium(player_name, team, driver)
        
        if cap_hit:
            df.at[idx, 'Cap Hit (M$)'] = cap_hit
            success_count += 1
        else:
            print(f"‚úó {player_name} ({team}): Non trouv√© (probablement sans contrat NHL)")
            fail_count += 1
        
        # Petite pause pour ne pas surcharger les serveurs
        time.sleep(1)
    
    # Fermer le navigateur
    driver.quit()
    print("\n‚úì Navigateur ferm√©")
    
    print(f"\n{'='*80}")
    print(f"üìä R√âSULTATS")
    print(f"{'='*80}")
    print(f"Total joueurs:        {len(df)}")
    print(f"Salaires trouv√©s:     {success_count} ({success_count/len(df)*100:.1f}%)")
    print(f"Non trouv√©s:          {fail_count}")
    print(f"\n‚úì Fichier sauvegard√©: {output_file}")
    print("\nüí° Joueurs non trouv√©s = g√©n√©ralement sans contrat NHL ou joueurs mineurs")
    
    return df

def get_teams_total(df):
    teams = df['Status'].unique()
    teams_total = {}
    
    for team in teams:
        team_df = df[df['Status'] == team]
        total_salary = team_df['Cap Hit (M$)'].sum()
        teams_total[team] = total_salary

    teams_total = dict(sorted(teams_total.items(), key=lambda item: item[1], reverse=True))
    return teams_total

if __name__ == "__main__":
    # Installer les d√©pendances si n√©cessaire
    print("üì¶ V√©rification des d√©pendances...")
    try:
        import selenium
        from webdriver_manager.chrome import ChromeDriverManager
    except ImportError:
        print("\n‚ùå D√©pendances manquantes!")
        print("\nInstallez avec:")
        print("pip install selenium webdriver-manager")
        exit(1)
    
    print("‚úì Toutes les d√©pendances sont install√©es\n")
    
    # Fichiers
    input_file = "Datas/Test_all.csv"
    output_file = input_file.replace('.csv', '-Enrichi.csv')
    output_file = output_file.replace('Datas/', 'Output_Datas/')

    print("="*80)

    start = time.time()
    df = enrich_fantrax_automatic(input_file, output_file)
    print(f"\n‚è±Ô∏è  Temps √©coul√©: {time.time() - start:.1f} secondes\n")
    # Calculer les totaux par √©quipe
    teams_total = get_teams_total(df)

    df = df.sort_values(by='Status', ascending=True)
    df.reset_index(drop=True, inplace=True)
    print(df.head())
    # Afficher les r√©sultats
    for team, total in teams_total.items():
        print(f"Total pour {team}: ${total:.2f}M")

    # Construire un nouveau DataFrame en ins√©rant une ligne total apr√®s chaque groupe Status
    rows = []
    for status, group in df.groupby('Status'):
        # ajouter les lignes du groupe
        for _, r in group.iterrows():
            rows.append(r.to_dict())

        # ajouter la ligne total pour ce status
        total_value = teams_total.get(status, 0.0)
        total_row = {
            'Player': "",
            'Team': "",
            'Status': f"TOTAL POUR {status}",
            'Cap Hit (M$)': f"{total_value:.2f}"
        }
        rows.append(total_row)

    df_with_totals = pd.DataFrame(rows, columns=["Player", "Team", "Status", "Cap Hit (M$)"])

    # Sauvegarder le r√©sultat dans un nouveau fichier CSV
    out_csv = "Output_Datas/Test_all-Enrichi-with_totals.csv"
    df_with_totals.to_csv(out_csv, index=False)
    print(f"Fichier avec totaux sauvegard√©")
